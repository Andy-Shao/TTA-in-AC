ViT(
  (feature_extractor): VisionTransformer(
    (transformer): Transformer(
      (embeddings): Embeddings(
        (hybrid_model): ResNetV2(
          (root): Sequential(
            (conv): StdConv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
            (gn): GroupNorm(32, 64, eps=1e-06, affine=True)
            (relu): ReLU(inplace=True)
          )
          (body): Sequential(
            (block1): Sequential(
              (unit1): PreActBottleneck(
                (gn1): GroupNorm(32, 64, eps=1e-06, affine=True)
                (conv1): StdConv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (gn2): GroupNorm(32, 64, eps=1e-06, affine=True)
                (conv2): StdConv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (gn3): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv3): StdConv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (relu): ReLU(inplace=True)
                (downsample): StdConv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (gn_proj): GroupNorm(256, 256, eps=1e-05, affine=True)
              )
              (unit2): PreActBottleneck(
                (gn1): GroupNorm(32, 64, eps=1e-06, affine=True)
                (conv1): StdConv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (gn2): GroupNorm(32, 64, eps=1e-06, affine=True)
                (conv2): StdConv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (gn3): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv3): StdConv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (relu): ReLU(inplace=True)
              )
              (unit3): PreActBottleneck(
                (gn1): GroupNorm(32, 64, eps=1e-06, affine=True)
                (conv1): StdConv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (gn2): GroupNorm(32, 64, eps=1e-06, affine=True)
                (conv2): StdConv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (gn3): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv3): StdConv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (relu): ReLU(inplace=True)
              )
            )
            (block2): Sequential(
              (unit1): PreActBottleneck(
                (gn1): GroupNorm(32, 128, eps=1e-06, affine=True)
                (conv1): StdConv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (gn2): GroupNorm(32, 128, eps=1e-06, affine=True)
                (conv2): StdConv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (gn3): GroupNorm(32, 512, eps=1e-06, affine=True)
                (conv3): StdConv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (relu): ReLU(inplace=True)
                (downsample): StdConv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (gn_proj): GroupNorm(512, 512, eps=1e-05, affine=True)
              )
              (unit2): PreActBottleneck(
                (gn1): GroupNorm(32, 128, eps=1e-06, affine=True)
                (conv1): StdConv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (gn2): GroupNorm(32, 128, eps=1e-06, affine=True)
                (conv2): StdConv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (gn3): GroupNorm(32, 512, eps=1e-06, affine=True)
                (conv3): StdConv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (relu): ReLU(inplace=True)
              )
              (unit3): PreActBottleneck(
                (gn1): GroupNorm(32, 128, eps=1e-06, affine=True)
                (conv1): StdConv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (gn2): GroupNorm(32, 128, eps=1e-06, affine=True)
                (conv2): StdConv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (gn3): GroupNorm(32, 512, eps=1e-06, affine=True)
                (conv3): StdConv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (relu): ReLU(inplace=True)
              )
              (unit4): PreActBottleneck(
                (gn1): GroupNorm(32, 128, eps=1e-06, affine=True)
                (conv1): StdConv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (gn2): GroupNorm(32, 128, eps=1e-06, affine=True)
                (conv2): StdConv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (gn3): GroupNorm(32, 512, eps=1e-06, affine=True)
                (conv3): StdConv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (relu): ReLU(inplace=True)
              )
            )
            (block3): Sequential(
              (unit1): PreActBottleneck(
                (gn1): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv1): StdConv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (gn2): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv2): StdConv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (gn3): GroupNorm(32, 1024, eps=1e-06, affine=True)
                (conv3): StdConv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (relu): ReLU(inplace=True)
                (downsample): StdConv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (gn_proj): GroupNorm(1024, 1024, eps=1e-05, affine=True)
              )
              (unit2): PreActBottleneck(
                (gn1): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv1): StdConv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (gn2): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv2): StdConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (gn3): GroupNorm(32, 1024, eps=1e-06, affine=True)
                (conv3): StdConv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (relu): ReLU(inplace=True)
              )
              (unit3): PreActBottleneck(
                (gn1): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv1): StdConv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (gn2): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv2): StdConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (gn3): GroupNorm(32, 1024, eps=1e-06, affine=True)
                (conv3): StdConv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (relu): ReLU(inplace=True)
              )
              (unit4): PreActBottleneck(
                (gn1): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv1): StdConv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (gn2): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv2): StdConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (gn3): GroupNorm(32, 1024, eps=1e-06, affine=True)
                (conv3): StdConv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (relu): ReLU(inplace=True)
              )
              (unit5): PreActBottleneck(
                (gn1): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv1): StdConv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (gn2): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv2): StdConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (gn3): GroupNorm(32, 1024, eps=1e-06, affine=True)
                (conv3): StdConv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (relu): ReLU(inplace=True)
              )
              (unit6): PreActBottleneck(
                (gn1): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv1): StdConv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (gn2): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv2): StdConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (gn3): GroupNorm(32, 1024, eps=1e-06, affine=True)
                (conv3): StdConv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (relu): ReLU(inplace=True)
              )
              (unit7): PreActBottleneck(
                (gn1): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv1): StdConv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (gn2): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv2): StdConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (gn3): GroupNorm(32, 1024, eps=1e-06, affine=True)
                (conv3): StdConv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (relu): ReLU(inplace=True)
              )
              (unit8): PreActBottleneck(
                (gn1): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv1): StdConv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (gn2): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv2): StdConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (gn3): GroupNorm(32, 1024, eps=1e-06, affine=True)
                (conv3): StdConv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (relu): ReLU(inplace=True)
              )
              (unit9): PreActBottleneck(
                (gn1): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv1): StdConv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (gn2): GroupNorm(32, 256, eps=1e-06, affine=True)
                (conv2): StdConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (gn3): GroupNorm(32, 1024, eps=1e-06, affine=True)
                (conv3): StdConv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (relu): ReLU(inplace=True)
              )
            )
          )
        )
        (patch_embeddings): Conv2d(1024, 768, kernel_size=(1, 1), stride=(1, 1))
        (dropout): Dropout(p=0.1, inplace=False)
      )
      (encoder): Encoder(
        (layer): ModuleList(
          (0-11): 12 x Block(
            (attention_norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
            (ffn_norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
            (ffn): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, bias=True)
              (fc2): Linear(in_features=3072, out_features=768, bias=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (attn): Attention(
              (query): Linear(in_features=768, out_features=768, bias=True)
              (key): Linear(in_features=768, out_features=768, bias=True)
              (value): Linear(in_features=768, out_features=768, bias=True)
              (out): Linear(in_features=768, out_features=768, bias=True)
              (attn_dropout): Dropout(p=0.0, inplace=False)
              (proj_dropout): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
          )
        )
        (encoder_norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      )
    )
    (decoder): DecoderCup(
      (fc): Linear(in_features=768, out_features=2048, bias=True)
      (blocks): ModuleList(
        (0): DecoderBlock(
          (conv1): Conv2dReLU(
            (0): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (conv2): Conv2dReLU(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (up): UpsamplingBilinear2d(scale_factor=2.0, mode='bilinear')
        )
        (1): DecoderBlock(
          (conv1): Conv2dReLU(
            (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (conv2): Conv2dReLU(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (up): UpsamplingBilinear2d(scale_factor=2.0, mode='bilinear')
        )
        (2): DecoderBlock(
          (conv1): Conv2dReLU(
            (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (conv2): Conv2dReLU(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (up): UpsamplingBilinear2d(scale_factor=2.0, mode='bilinear')
        )
        (3): DecoderBlock(
          (conv1): Conv2dReLU(
            (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (conv2): Conv2dReLU(
            (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (up): UpsamplingBilinear2d(scale_factor=2.0, mode='bilinear')
        )
      )
      (avgpool): AdaptiveAvgPool1d(output_size=1)
    )
  )
)